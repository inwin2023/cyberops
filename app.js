// util
const rnd=(min,max)=>Math.floor(Math.random()*(max-min+1))+min;const clamp=(v,a,b)=>Math.max(a,Math.min(b,v));const fmt=(n)=>Number(n).toLocaleString('en-US');const nowISO=()=>new Date().toISOString();
// data
const KEYWORDS=["ransom","zero-day","supply-chain","C2","phishing","APT","onion","darkmarket","drop site","broker","wallet","exploit","persistence","beacon","stealer","loader","initial access","MFA bypass","proxy","leak"];
const POSTS=["Rumors of a new zero-day spreading in unmanaged edge routers.","Broker seeks access to midsize EU logistics firm, DM with onion.","Phishing kit update adds MFA bypass techniques.","Wallet tumbling service now supports faster mixing.","Ransom group recruiting affiliates. Payouts weekly.","Darkmarket vendor claims fresh DB dump of 2M emails.","Forum mod warns about fake C2 frameworks loaded with stealers.","Looking for loader devs. Need stable persistence on Win + AD.","New beacon signature evades common EDR, ask for sample.","Supply-chain hit discussed in private channel."];
const CONTRACT_TEMPLATES=[{title:'Corporate Breach Intel',brief:'Find indicators of a planned breach against a manufacturing client. Identify keyword, source, and confidence.',reward:[800,1400],heat:[6,12],type:'OSINT'},{title:'Silent Backdoor Hunt',brief:'Trace a C2 route (graph puzzle) and keep noise under threshold. Optimize path cost.',reward:[1200,2000],heat:[8,16],type:'ROUTING'},{title:'Password Vault Crack',brief:'Solve the cipher pattern (mini-CRACK) to unlock a protected archive.',reward:[600,1200],heat:[5,10],type:'CRACK'}];
// storage helpers
function load(k,d){try{const v=localStorage.getItem(k);return v?JSON.parse(v):d}catch(e){return d}}
function save(k,v){try{localStorage.setItem(k,JSON.stringify(v));}catch(e){}}
// state
let state={day:load('cy_day',1),funds:load('cy_funds',2500),heat:load('cy_heat',5),rep:load('cy_rep',{corp:5,state:5,shadow:5}),contracts:load('cy_contracts',[]),active:null,log:load('cy_log',[])};
if(state.contracts.length===0){state.contracts=[newContract(1),newContract(1),newContract(1)];}
function newContract(day){const t=CONTRACT_TEMPLATES[rnd(0,CONTRACT_TEMPLATES.length-1)];return{id:day+'-'+Math.random().toString(36).slice(2,8),title:t.title,brief:t.brief,type:t.type,reward:rnd(t.reward[0],t.reward[1]),heat:rnd(t.heat[0],t.heat[1]),createdAt:nowISO(),expiresIn:rnd(2,4)}}
// dom helpers
const $=s=>document.querySelector(s);
function setText(id,v){const el=typeof id==='string'?document.getElementById(id):id; if(el) el.innerText=v;}
function addLog(m){state.log.unshift({t:nowISO(),text:m}); state.log=state.log.slice(0,100); save('cy_log',state.log); renderLog();}
function toast(kind,msg){const t=$('#toast'); t.classList.toggle('bad',kind==='bad'); t.style.display='block'; t.textContent=msg; setTimeout(()=>t.style.display='none',2500);}
function persist(){save('cy_day',state.day); save('cy_funds',state.funds); save('cy_heat',state.heat); save('cy_rep',state.rep); save('cy_contracts',state.contracts);}
// renderers
function renderTop(){setText('day',state.day); setText('funds',fmt(state.funds)); setText('heat',state.heat); $('#yy').innerText=new Date().getFullYear();}
function renderContracts(){const root=$('#contracts'); root.innerHTML=''; if(state.contracts.length===0){root.innerHTML='<div class="pad mut">Нет доступных контрактов. Используй <span class="mono hl">next</span> в терминале.</div>'; return;} state.contracts.forEach(c=>{const div=document.createElement('div'); div.className='item'; div.innerHTML=`<div style="flex:1"><div style="font-weight:600">${c.title}</div><div class="mut" style="font-size:14px">${c.brief}</div><div class="mut" style="margin-top:6px;font-size:12px">Type: ${c.type} • Reward $${fmt(c.reward)} • Heat ${c.heat} • Expires in ${c.expiresIn}d • ID: <span class="mono">${c.id}</span></div></div><div class="grid" style="grid-auto-flow:row"><button class="btn pr" data-act="accept" data-id="${c.id}">Принять</button><button class="btn" data-act="decline" data-id="${c.id}">Отклонить</button></div>`; root.appendChild(div);});}
function renderRep(){const r=state.rep; $('#rep').innerHTML=['corp','state','shadow'].map(k=>`<div class="cell"><div class="mut" style="text-transform:uppercase;font-size:12px">${k}</div><div style="font-size:18px;font-weight:700">${r[k]}</div></div>`).join('');}
function renderLog(){const root=$('#log'); root.innerHTML=''; state.log.forEach(e=>{const d=new Date(e.t); const it=document.createElement('div'); it.className='it'; it.innerHTML='<div class="mut">'+d.toLocaleString()+'</div><div>'+e.text+'</div>'; root.appendChild(it);});}
function renderActiveTag(){const tag=$('#activeTag'); if(state.active){tag.style.display='inline-block'; tag.textContent='Active: '+state.active.type;} else tag.style.display='none';}
function renderMiniHost(){const host=$('#miniHost'); if(!state.active){host.textContent='Прими контракт, чтобы начать мини-игру.'; return;} const t=state.active.type; if(t==='OSINT'){mountOsint(host); return;} if(t==='ROUTING'){mountRouting(host); return;} if(t==='CRACK'){mountCrack(host); return;} host.textContent='Unknown contract type.';}
// minis
function mountOsint(host){const targetKw=KEYWORDS[rnd(0,KEYWORDS.length-1)]; const rows=POSTS.map(p=>({text:p,kw:false})); const injectCount=rnd(2,3); for(let i=0;i<injectCount;i++){const idx=rnd(0,rows.length-1); if(!rows[idx].text.includes(targetKw)){const words=rows[idx].text.split(' '); const pos=rnd(1,words.length); words.splice(pos,0,targetKw); rows[idx]={text:words.join(' '),kw:true};} else rows[idx].kw=true;} host.innerHTML=`<div class="mut" style="font-size:14px">Target intel keyword is hidden in the noise. Hint: it exists <b>${rows.filter(r=>r.text.includes(targetKw)).length}</b>×.</div><div class="flex mt8"><input type="text" id="osintQ" placeholder="Search posts (try keywords)…"><button id="osintConfirm" class="btn pr">Confirm</button></div><div class="mut" style="font-size:12px;margin-top:4px">Tip: попробуй слова из мира угроз (APT, C2, zero-day, stealer…).</div><div id="osintList" class="list mt12"></div><div class="mut" style="font-size:12px;margin-top:6px">Your guess must equal the hidden intel keyword exactly.</div><div class="flex mt12"><button class="btn dan" id="giveup">Сдаться</button><button class="btn" id="pause">Пауза</button></div>`; const list=$('#osintList'); function draw(q=''){list.innerHTML=''; rows.filter(r=>r.text.toLowerCase().includes(q)).forEach(r=>{const d=document.createElement('div'); d.className='it'; d.style.padding='10px 12px'; d.textContent=r.text; list.appendChild(d);});} draw(''); $('#osintQ').addEventListener('input',e=>draw(e.target.value.toLowerCase())); $('#osintConfirm').onclick=()=>{const q=$('#osintQ').value.trim().toLowerCase(); if(q===targetKw.toLowerCase()) completeMission(true,{keyword:targetKw}); else toast('bad','Неверный ключ. Подумай о терминах на уровне SOC/Threat Intel.');}; $('#giveup').onclick=()=>completeMission(false); $('#pause').onclick=()=>{state.active=null; renderActiveTag(); renderMiniHost(); persist();};}
function mountRouting(host){const graph={nodes:['SRC','A','B','C','DST'],edges:[['SRC','A'],['SRC','B'],['A','C'],['B','C'],['C','DST']].map(([u,v])=>({u,v,w:rnd(2,9),noise:rnd(1,5)}))}; const budget=rnd(10,16), noiseCap=rnd(6,10); let path=['SRC']; function canExtend(to){const last=path[path.length-1]; return graph.edges.some(e=>(e.u===last&&e.v===to)||(e.v===last&&e.u===to));} function measure(){let total=0,noise=0; for(let i=0;i<path.length-1;i++){const u=path[i],v=path[i+1]; const e=graph.edges.find(e=>(e.u===u&&e.v===v)||(e.v===u&&e.u===v)); if(e){total+=e.w; noise+=e.noise;}} return {total,noise};} function draw(){host.innerHTML=`<div class="mut" style="font-size:14px">Проложи маршрут от <b>SRC</b> к <b>DST</b> под бюджетом <b>${budget}</b> и шумом ≤ <b>${noiseCap}</b>.</div><div class="grid mt12" style="grid-template-columns:repeat(5,1fr)">${graph.nodes.map(n=>{const allowed=canExtend(n)||(n==='SRC'&&path.length===1); const chosen=path.includes(n); const cls=chosen?'btn ring':'btn'+(allowed?'':' mut'); return `<button class="${cls}" data-n="${n}" ${allowed||chosen?'':'disabled'}>${n}</button>`;}).join('')}</div><div class="mut mt8" style="font-size:12px">Path: ${path.join(' → ')} | Cost: ${measure().total} | Noise: ${measure().noise}</div><div class="flex mt12"><button id="valid" class="btn pr">Validate</button><button id="reset" class="btn">Reset</button><button id="giveup" class="btn dan">Сдаться</button><button id="pause" class="btn">Пауза</button></div><div class="mut" style="font-size:12px;margin-top:8px;border:1px solid var(--line);padding:10px;border-radius:12px">Подсказка: обычно SRC→A→C→DST или SRC→B→C→DST; сравни веса (cost) и шум (noise).</div>`; host.querySelectorAll('button[data-n]').forEach(b=>{b.onclick=()=>{const n=b.getAttribute('data-n'); if(n===path[path.length-1])return; if(canExtend(n)||(n==='SRC'&&path.length===1)){path=[...path,n]; draw();}});}); document.getElementById('valid').onclick=()=>{const m=measure(); const ok=path[path.length-1]==='DST'&&m.total<=budget&&m.noise<=noiseCap; if(ok) completeMission(true,{path,cost:m}); else toast('bad','Маршрут превышает лимиты по бюджету/шуму.');}; document.getElementById('reset').onclick=()=>{path=['SRC']; draw();}; document.getElementById('giveup').onclick=()=>completeMission(false); document.getElementById('pause').onclick=()=>{state.active=null; renderActiveTag(); renderMiniHost(); persist();}; } draw();}
function mountCrack(host){const seq=Array.from({length:rnd(4,6)},()=>rnd(1,4)); let input=[]; let showing=false; host.innerHTML=`<div class="mut" style="font-size:14px">Повтори мигающую последовательность. Нажми «Play sequence» для подсказки.</div><div id="pads" class="grid minipads mt12" style="grid-template-columns:repeat(2,1fr); gap:10px">${[1,2,3,4].map(id=>`<button data-id="${id}">${id}</button>`).join('')}</div><div class="flex mt12"><button id="play" class="btn pr">Play sequence</button><button id="giveup" class="btn dan">Сдаться</button><button id="pause" class="btn">Пауза</button></div>`; async function playback(){if(showing)return; showing=true; for(const id of seq){const el=host.querySelector('button[data-id="'+id+'"]'); if(el){el.classList.add('ring'); await new Promise(r=>setTimeout(r,350)); el.classList.remove('ring');} await new Promise(r=>setTimeout(r,120));} showing=false;} playback(); host.querySelectorAll('#pads button').forEach(b=> b.onclick=()=>{if(showing)return; input.push(Number(b.getAttribute('data-id'))); if(input.length===seq.length){const ok=input.every((v,i)=>v===seq[i]); if(ok) completeMission(true,{length:seq.length}); else {toast('bad','Неверная последовательность. Попробуй снова.'); input=[];}}}); document.getElementById('play').onclick=playback; document.getElementById('giveup').onclick=()=>completeMission(false); document.getElementById('pause').onclick=()=>{state.active=null; renderActiveTag(); renderMiniHost(); persist();};}
// flow
function accept(id){const c=state.contracts.find(x=>x.id===id); if(!c) return false; state.active=c; state.contracts=state.contracts.filter(x=>x.id!==id); addLog('Контракт принят: '+c.title); persist(); renderContracts(); renderActiveTag(); renderMiniHost(); return true;}
function decline(id){const c=state.contracts.find(x=>x.id===id); if(!c) return false; state.contracts=state.contracts.filter(x=>x.id!==id); addLog('Контракт отклонён: '+c.title); persist(); renderContracts(); return true;}
function nextDay(){state.day+=1; state.heat=clamp(state.heat-1,0,100); state.contracts=state.contracts.map(c=>({...c,expiresIn:c.expiresIn-1})).filter(c=>c.expiresIn>0); while(state.contracts.length<3) state.contracts.push(newContract(state.day)); addLog('День завершён. Поступили новые контракты и снизился шум.'); persist(); renderTop(); renderContracts();}
function completeMission(success,details){const c=state.active; if(!c)return; if(success){state.funds+=c.reward; state.heat=clamp(state.heat+rnd(0,Math.max(1,c.heat-3)),0,100); const d=c.type==='OSINT'?{corp:1,state:1,shadow:0}:c.type==='ROUTING'?{corp:0,state:1,shadow:1}:{corp:1,state:0,shadow:1}; state.rep.corp=clamp(state.rep.corp+d.corp,0,100); state.rep.state=clamp(state.rep.state+d.state,0,100); state.rep.shadow=clamp(state.rep.shadow+d.shadow,0,100); addLog('Успех: '+c.title+' (+$'+fmt(c.reward)+').'); toast('ok','Контракт выполнен: +$'+fmt(c.reward)); } else { state.heat=clamp(state.heat+c.heat,0,100); state.funds=Math.max(0,state.funds-rnd(200,400)); addLog('Провал: '+c.title+'. Клиент недоволен.'); toast('bad','Контракт провален. Рост шума и штраф.'); } state.active=null; persist(); renderTop(); renderRep(); renderActiveTag(); renderMiniHost(); }
// terminal
const term={lines:['AGM> help for commands.'], cmd(c){const [cmd,...args]=c.trim().split(/\s+/); switch(cmd){case'help':return['Commands:','help — подсказка','status — показатели','scan — сгенерировать разведданные (безопасно)','probe — рискованная разведка (меньше бюджета на миссию, но шум)','accept <id> — принять контракт','decline <id> — отклонить контракт','next — перейти к следующему дню']; case'status':return['Day '+state.day+' | Funds $'+fmt(state.funds)+' | Heat '+state.heat+'/100','Reputation — Corp '+state.rep.corp+', State '+state.rep.state+', Shadow '+state.rep.shadow, state.active?'Active: '+state.active.title:'Active: none','Contracts: '+state.contracts.map(c=>c.id).join(', ')]; case'scan':state.funds+=50; persist(); renderTop(); return['Сканирование открытых источников… +$50 консультативного дохода.']; case'probe':state.funds+=120; state.heat=clamp(state.heat+2,0,100); persist(); renderTop(); return['Активная разведка… +$120, +2 heat (следы в логах).']; case'accept':return[accept(args[0])?'Принято.':'Не найдено либо уже принято.']; case'decline':return[decline(args[0])?'Отклонено.':'Не найдено.','Совет: держи три слота для лучших предложений.']; case'next':nextDay(); return['Переход к следующему дню…']; default:return['Unknown command. type: help'];}}};
function drawTerm(){const scr=document.getElementById('term'); scr.innerHTML=term.lines.map(l=>'<div>'+l.replace(/</g,'&lt;')+'</div>').join(''); scr.scrollTop=scr.scrollHeight;}
function runCmd(){const inp=document.getElementById('termInput'); const c=inp.value.trim(); if(!c) return; const out=term.cmd(c); term.lines.push('AGM> '+c,...out); inp.value=''; drawTerm();}
// wire
document.addEventListener('click', (e)=>{const btn=e.target.closest('button[data-act]'); if(!btn) return; const act=btn.getAttribute('data-act'); const id=btn.getAttribute('data-id'); if(act==='accept') accept(id); if(act==='decline') decline(id);});
document.addEventListener('DOMContentLoaded', ()=>{document.getElementById('newReq').onclick=()=>{state.contracts.push(newContract(state.day)); persist(); renderContracts();}; document.getElementById('reset').onclick=()=>{if(confirm('Сбросить прогресс?')){ localStorage.clear(); location.reload(); }}; document.getElementById('termRun').onclick=runCmd; document.getElementById('termInput').addEventListener('keydown', e=>{ if(e.key==='Enter') runCmd(); }); renderTop(); renderContracts(); renderRep(); renderLog(); renderActiveTag(); renderMiniHost(); drawTerm();});
